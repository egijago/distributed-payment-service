version: "3.7"

services:
  transaction-service-db:
    image: mongo:7.0
    command: ["--replSet", "rs0", "--bind_ip_all", "--port", "27017"]
    ports:
      - 27017:27017
    extra_hosts:
      - "host.docker.internal:host-gateway"
    healthcheck:
      test: echo "try { rs.status() } catch (err) { rs.initiate({_id:'rs0',members:[{_id:0,host:'host.docker.internal:27017'}]}) }" | mongosh --port 27017 --quiet
      interval: 5s
      timeout: 30s
      start_period: 0s
      start_interval: 1s
      retries: 30
    volumes:
      - "mongo1_data:/data/db"
      - "mongo1_config:/data/configdb"

  transaction-command-service:
    build:
      context: ./transaction-command-service/.
    ports:
      - "8001:8000"
    volumes:
      - "./transaction-command-service/.:/app"
      - "/app/node_modules"
    command: >
      sh -c "
            npx prisma db push &&
            npx prisma generate dev &&
            npm i &&
            npm run dev"
    environment:
      - CHOKIDAR_USEPOLLING=true
    depends_on:
      transaction-service-db:
        condition: service_healthy

  transaction-query-service:
    hostname: transaction-query-service 
    build:
      context: ./transaction-query-service/.
    ports:
      - "8002:8000"
    env_file:
      - ./transaction-query-service/.env
    volumes:
      - "./transaction-query-service/.:/app"
      - "/app/node_modules"
    command: >
      sh -c "
            npx prisma generate dev &&
            npm run dev"
    environment:
      - CHOKIDAR_USEPOLLING=true
    depends_on:
      transaction-service-db:
        condition: service_healthy

  transaction-service:
    build:
      context: ./transaction-service/.
    ports:
      - "8003:8000"
    volumes:
      - "./transaction-service/.:/app"
      - "/app/node_modules"
    command: >
      sh -c "
            npm i &&
            npm run dev"
    environment:
      - CHOKIDAR_USEPOLLING=true
    depends_on:
      transaction-service-db:
        condition: service_healthy

  # kafdrop:
  #   image: obsidiandynamics/kafdrop
  #   restart: "no"
  #   ports:
  #     - "9000:9000"
  #   environment:
  #     KAFKA_BROKERCONNECT: "kafka:29092"
  #   depends_on:
  #     - "kafka"
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181
  
  kafka:
    image: confluentinc/cp-kafka:latest
    depends_on:
      - zookeeper
    ports:
      - 29092:29092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://kafka:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
  
  user-service-db:
    hostname: user-service-db
    image: postgres:latest
    environment:
      POSTGRES_USER: user
      POSTGRES_PASSWORD: user
      POSTGRES_DB: user
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d user"]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - ./user-service/db:/var/lib/postgresql/data/
  user-service:
    hostname: user-service
    build:
      context: ./user-service/.
    ports:
      - "8000:8000"
    env_file:
      - ./user-service/.env
    volumes:
      - "./user-service/.:/app"
      - "/app/node_modules"
    command: >
      sh -c "
            npx prisma db push &&
            npx prisma generate dev &&
            npm run dev"
    environment:
      - CHOKIDAR_USEPOLLING=true
    depends_on:
      user-service-db:
        condition: service_healthy
  redis:
    hostname: redis
    image: redis:6.2-alpine
    restart: always
    ports:
      - '6379:6379'
    command: redis-server --save 20 1 --loglevel warning
    volumes: 
      - redis:/data

volumes:
  mongo1_data:
  mongo1_config:
  redis:
    driver: local